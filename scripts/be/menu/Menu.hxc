package be.menu;

import flixel.FlxG;
import flixel.FlxObject;
import flixel.math.FlxMath;

import funkin.PlayerSettings;
import funkin.input.Controls;
import funkin.modding.module.ModuleHandler;
import funkin.modding.module.ScriptedModule;

/**
 * An object representing a menu.
 */
typedef MenuObj = {
	/**
	 * Arbitrary custom data attached to the menu.
	 */
	data:Null<Dynamic>,
	
	/**
	 * Arbitrary related container object.
	 */
	container:Null<FlxObject>,
	
	/**
	 * Whether menu input is enabled.
	 */
	enabled:Bool,
	
	/**
	 * Stops the menu from updating completely.
	 * 
	 * `enabled` is ignored if `true`.
	 */
	frozen:Bool,
	
	/**
	 * Internal index for the current keyboard-based `MenuItem` selection.
	 * 
	 * Don't set directly, use `setSelection` instead.
	 */
	selection:Int,
	
	/**
	 * Internal index for the previous keyboard-based `MenuItem` selection.
	 * 
	 * Not necessary for the menu to function, mainly just for user convenience.
	 */
	prevSelection:Int,
	
	/**
	 * Override the current keyboard-based `MenuItem` selection.
	 * 
	 * Also calls `onFocus` and `onUnfocus` for the respective items.
	 * 
	 * @param selection The new selection.
	 */
	setSelection:(Int)->Void,
	
	/**
	 * All keyboard-based `MenuItem`s in the menu.
	 * 
	 * Don't push to directly, use `pushItems` instead.
	 */
	items:Array<Dynamic>,
	
	/**
	 * Push existing `MenuItem`s to the menu as keyboard-based items.
	 * 
	 * @param items The items to add in order.
	 * @param overrideEnable Optionally override all items `enabled` state.
	 */
	pushItems:(Array<Dynamic>, Null<Bool>)->Void,
	
	/**
	 * Internal index for the current mouse-based `MenuItem` selection.
	 * 
	 * Should not be set directly.
	 */
	mouseSelection:Int,
	
	/**
	 * Internal index for the previous mouse-based `MenuItem` selection.
	 * 
	 * Not necessary for the menu to function, mainly just for user convenience.
	 */
	prevMouseSelection:Int,
	
	/**
	 * All mouse-based `MenuItem`s in the menu.
	 * 
	 * The order doesn't matter unless you have items on top of each other,
	 * in which case the one with the lowest index will be selected (first found in overlap check).
	 * 
	 * Don't push to directly, use `pushMouseItems` instead.
	 */
	mouseItems:Array<Dynamic>,
	
	/**
	 * Push existing `MenuItem`s to the menu as mouse-based items.
	 * 
	 * @param items The items to add in order.
	 * @param overrideEnable Optionally override all items `enabled` state.
	 */
	pushMouseItems:(Array<Dynamic>, Null<Bool>)->Void,
	
	/**
	 * The number of columns for keyboard-based `MenuItem`s.
	 */
	sizeX:Int,
	
	/**
	 * The number of rows for keyboard-based `MenuItem`s.
	 */
	sizeY:Int,
	
	/**
	 * Whether the menu should wrap around the X axis for keyboard-based `MenuItem`s.
	 */
	wrapX:Bool,
	
	/**
	 * Whether the menu should wrap around the Y axis for keyboard-based `MenuItem`s.
	 */
	wrapY:Bool,
	
	/**
	 * Internal counter for the menu `onDirectionPress` callback.
	 */
	navigationHoldTick:Array<Float>,
	
	/**
	 * Whether to repeatedly navigate to other items when the direction is held.
	 * 
	 * Note: the navigation will stop if it reaches an item with `autoNavigate` set to `false`,
	 * but it will invoke `onDirectionPress` for that item.
	 * 
	 * Defaults to `false`.
	 */
	navigationHold:Null<Bool>,
	
	/**
	 * The time in seconds before the menu starts navigating repeatedly when a direction is held.
	 * Only used if `navigationHold` is `true`.
	 * 
	 * Defaults to `0.5`, minimum `0`.
	 */
	navigationHoldStart:Null<Float>,
	
	/**
	 * The time in seconds for each repeated input when a direction is held.
	 * Only used if `navigationHold` is `true`.
	 * 
	 * Defaults to `0.1`, minimum `0.01`.
	 */
	navigationHoldInterval:Null<Float>,
	
	/**
	 * Arbitrary callback meant to be called when the menu is entered.
	 */
	onEnter:Null<()->Void>,
	
	/**
	 * Arbitrary callback meant to be called when the menu is exited.
	 * 
	 * Should typically be called within `onBack`, but depends on the context.
	 */
	onExit:Null<()->Void>,
	
	/**
	 * Called when the back button is pressed.
	 */
	onBack:Null<()->Void>,
	
	/**
	 * Called every frame.
	 * 
	 * @param elapsed The time elapsed since the last frame in seconds.
	 */
	onUpdate:Null<(Float)->Void>,
	
	/**
	 * Prevents input for a duration.
	 * If a debounce is already active, its time remains, unless `duration` is longer.
	 * 
	 * @param duration The debounce time in seconds. Defaults to `0.1`.
	 */
	debounce:(Float)->Void,
	
	/**
	 * Internal sequence for debounce.
	 */
	debounceSequence:Null<Dynamic>,
	
	/**
	 * Updates the menu.
	 * 
	 * @param elapsed The time elapsed since the last frame in seconds.
	 */
	update:(Float)->Void,
	
	/**
	 * Whether the menu exists (or hasn't been destroyed, same thing).
	 */
	exists:Bool,
	
	/**
	 * Destroys the menu. Does not destroy the items.
	 */
	destroy:()->Void
}

/**
 * Data for creating a `MenuObj` object.
 */
typedef MenuData = {
	/**
	 * Arbitrary custom data attached to the menu.
	 */
	data:Null<Dynamic>,
	
	/**
	 * Arbitrary related container object.
	 */
	container:Null<FlxObject>,
	
	/**
	 * Whether the menu input should be enabled initially.
	 * 
	 * Defaults to `false`.
	 */
	enabled:Null<Bool>,
	
	/**
	 * The keyboard-based `MenuItem`s to add to the menu, in order.
	 */
	items:Null<Array>,
	
	/**
	 * The mouse-based `MenuItem`s to add to the menu.
	 * 
	 * The order doesn't matter unless you have items on top of each other,
	 * in which case the one with the lowest index will be selected (first found in overlap check).
	 */
	mouseItems:Null<Array>,
	
	/**
	 * Optionally override all menu items `enabled` state on menu creation.
	 */
	overrideEnable:Null<Bool>,
	
	/**
	 * The number of columns in the menu.
	 * 
	 * Defaults to `1`.
	 */
	sizeX:Null<Int>,
	
	/**
	 * The number of rows in the menu.
	 * 
	 * Defaults to the number of items if `sizeX` is `1`, or the safest number of rows that can fit.
	 */
	sizeY:Null<Int>,
	
	/**
	 * Whether the menu should wrap around the X axis.
	 * 
	 * Defaults to `true`.
	 */
	wrapX:Null<Bool>,
	
	/**
	 * Whether the menu should wrap around the Y axis.
	 * 
	 * Defaults to `true`.
	 */
	wrapY:Null<Bool>,
	
	/**
	 * Whether to repeatedly navigate to other items when the direction is held.
	 * 
	 * Note: the navigation will stop if it reaches an item with `autoNavigate` set to `false`,
	 * but it will invoke `onDirectionPress` for that item.
	 * 
	 * Defaults to `false`.
	 */
	navigationHold:Null<Bool>,
	
	/**
	 * The time in seconds before the menu starts navigating repeatedly when a direction is held.
	 * Only used if `navigationHold` is `true`.
	 * 
	 * Defaults to `0.5`.
	 */
	navigationHoldStart:Null<Float>,
	
	/**
	 * The time in seconds for each repeated input when a direction is held.
	 * Only used if `navigationHold` is `true`.
	 * 
	 * Defaults to `0.1`.
	 */
	navigationHoldInterval:Null<Float>,
	
	/**
	 * Arbitrary callback meant to be called when the menu is entered.
	 */
	onEnter:Null<()->Void>,
	
	/**
	 * Arbitrary callback meant to be called when the menu is exited.
	 * 
	 * Should typically be called within `onBack`, but depends on the context.
	 */
	onExit:Null<()->Void>,
	
	/**
	 * Called when the back button is pressed.
	 */
	onBack:Null<()->Void>,
	
	/**
	 * Called every frame.
	 * 
	 * @param elapsed The time elapsed since the last frame in seconds.
	 */
	onUpdate:Null<(Float)->Void>
}

/**
 * Module for creating `MenuObj` objects.
 * 
 * Example:
 * ```haxe
 * package exampleMod.states;
 * 
 * import flixel.FlxG;
 * import flixel.FlxObject;
 * import flixel.group.FlxTypedSpriteGroup;
 * import flixel.tweens.FlxEase;
 * import flixel.tweens.FlxTween;
 * 
 * import funkin.Paths;
 * import funkin.audio.FunkinSound;
 * import funkin.graphics.FunkinCamera;
 * import funkin.modding.base.ScriptedMusicBeatState;
 * import funkin.modding.module.ModuleHandler;
 * import funkin.modding.module.ScriptedModule;
 * 
 * class ExampleMenuState extends ScriptedMusicBeatState {
 *     public var camMain:FunkinCamera = null;
 *     
 *     override public function create():Void {
 *         super.create();
 *         
 *         camMain = new FunkinCamera("exampleMod: camMain (exampleMod.states.ExampleMenuState)", 0, 0, 1280, 720, 1);
 *         camMain.bgColor = 0xff000000;
 *         FlxG.cameras.add(camMain, true);
 *         
 *         ModuleHandler.getModule("exampleMod.states.ExampleMenuState.ExampleMenu").scriptCall("setup", [FlxG.state, camMain]);
 *         
 *         ModuleHandler.getModule("be.sequence.Sequence").scriptCall("new_Sequence", [[
 *             {time: 0.5, callback: function():Void {
 *                 ModuleHandler.getModule("exampleMod.states.ExampleMenuState.ExampleMenu").scriptGet("menu").onEnter();
 *             }},
 *             
 *             {time: 1.25, callback: function():Void {
 *                 ModuleHandler.getModule("exampleMod.states.ExampleMenuState.ExampleMenu").scriptGet("menu").enabled = true;
 *             }},
 *         ]]);
 *     }
 *     
 *     override public function destroy():Void {
 *         super.destroy();
 *         
 *         FlxG.cameras.remove(camMain, true);
 *         camMain = null;
 *         
 *         ModuleHandler.getModule("exampleMod.states.ExampleMenuState.ExampleMenu").scriptCall("destroy");
 *     }
 * }
 * 
 * class ExampleMenu extends ScriptedModule {
 *     public function new() {
 *         super("exampleMod.states.ExampleMenuState.ExampleMenu");
 *     }
 *     
 *     private var exists:Bool = false;
 *     private var parent:ScriptedMusicBeatState = null;
 *     private var camera:FunkinCamera = null;
 *     
 *     private var menu:Dynamic = null;
 *     private var menuItems:Array<Dynamic> = new Array();
 *     private var mouseItems:Array<Dynamic> = new Array();
 *     private var menuItemGroup:FlxTypedSpriteGroup = null;
 *     
 *     public function setup(?targetState:ScriptedMusicBeatState, ?targetCamera:FunkinCamera):Void {
 *         if (exists) {
 *             return;
 *         }
 *         
 *         parent = targetState == null ? FlxG.state : targetState;
 *         camera = targetCamera == null ? FlxG.camera : targetCamera;
 *         
 *         setupItems();
 *         menu = ModuleHandler.getModule("be.menu.Menu").scriptCall("new_Menu", [{
 *             data: {
 *                 exampleValue: 0
 *             },
 *             
 *             container: menuItemGroup,
 *             
 *             items: menuItems,
 *             mouseItems: mouseItems,
 *             
 *             sizeX: menuItems.length,
 *             sizeY: 1,
 *             
 *             wrapY: false,
 *             
 *             navigationHold: true,
 *             
 *             onEnter: function():Void {
 *                 for (i in 0...menuItemGroup.members.length) {
 *                     var container:FunkinSprite = menuItemGroup.members[i];
 *                     FlxTween.globalManager.cancelTweensOf(container, ["x"]);
 *                     container.x = -400;
 *                     FlxTween.tween(container, {x: 200}, 0.5 + 0.1 * i, FlxEase.cubicOut);
 *                 }
 *             }
 *             
 *             onBack: function():Void {
 *                 menu.enabled = false;
 *                 menu.onExit();
 *             }
 *         }]);
 *         
 *         exists = true;
 *     }
 *     
 *     private function setupItems():Void {
 *         var item1Sprite:FunkinSprite = new FunkinSprite(-400, 200).loadSparrow("exampleMod/exampleMenu/item1Sprite");
 *         item1Sprite.animation.addByPrefix("idle", "idle", 24, true);
 *         item1Sprite.animation.addByPrefix("focus", "focus", 24, true);
 *         item1Sprite.animation.addByPrefix("select", "select", 24, false);
 *         
 *         var item1:Dynamic = ModuleHandler.getModule("be.menu.MenuItem").scriptCall("new_MenuItem", [{
 *             container: menuItemGroup.add(item1Sprite),
 *             
 *             onFocus: function(prev:Null<Dynamic>):Void {
 *                 item1Sprite.animation.play("focus");
 *                 
 *                 FunkinSound.load(Paths.sound("exampleMod/exampleMenu/focusItem"), 0.5, false, true, true, false);
 *             },
 *             
 *             onUnfocus: function(next:Dynamic):Void {
 *                 item1Sprite.animation.play("idle");
 *             },
 *             
 *             onPress: function():Void {
 *                 // Do something here idk!
 *                 
 *                 FunkinSound.load(Paths.sound("exampleMod/exampleMenu/selectItem"), 0.5, false, true, true, false);
 *             }
 *         }]));
 *         
 *         menuItems.push(item1);
 *         
 *         // Additional items...
 *         
 *         var mouseItem1Sprite:FunkinSprite = new FunkinSprite(800, 200).loadSparrow("exampleMod/exampleMenu/exampleMouseItem");
 *         mouseItem1Sprite.animation.addByPrefix("idle", "idle", 24, true);
 *         mouseItem1Sprite.animation.addByPrefix("focus", "focus", 24, true);
 *         mouseItem1Sprite.animation.addByPrefix("hold", "hold", 24, true);
 *         mouseItem1Sprite.animation.addByPrefix("select", "select", 24, false);
 *         
 *         var mouseItem1SpriteHitbox:FlxObject = new FlxObject(
 *             mouseItem1Sprite.x - 50,
 *             mouseItem1Sprite.y - 50,
 *             mouseItem1Sprite.width + 100,
 *             mouseItem1Sprite.height + 100
 *         );
 *         
 *         var mouseItem1:Dynamic = ModuleHandler.getModule("be.menu.MenuItem").scriptCall("new_MenuItem", [{
 *             data: {
 *                 holdPercentage: 0
 *             },
 *             
 *             container: mouseItem1Sprite,
 *             hitbox: mouseItem1SpriteHitbox,
 *             
 *             pressHold: true,
 *             pressHoldStart: 0,
 *             pressHoldInterval: 0.05,
 *             
 *             onFocus: function(prev:Null<Dynamic>):Void {
 *                 mouseItem1Sprite.animation.play("focus");
 *                 
 *                 FunkinSound.load(Paths.sound("exampleMod/exampleMenu/focusItem"), 0.5, false, true, true, false);
 *             },
 *             
 *             onUnfocus: function(next:Null<Dynamic>):Void {
 *                 mouseItem1Sprite.animation.play("idle");
 *             },
 *             
 *             onPress: function():Void {
 *                 mouseItem1Sprite.animation.play("hold");
 *             },
 *             
 *             onHold: function():Void {
 *                 mouseItem1.data.holdPercentage += 0.01;
 *             },
 *             
 *             onRelease: function():Void {
 *                 if (mouseItem1.data.holdPercentage >= 1) {
 *                     // Do something here idk!
 *                     
 *                     FunkinSound.load(Paths.sound("exampleMod/exampleMenu/selectItem"), 0.5, false, true, true, false);
 *                 } else {
 *                     mouseItem1Sprite.animation.play("idle");
 *                 }
 *                 
 *                 mouseItem1.data.holdPercentage = 0;
 *             }
 *         }]));
 *         
 *         // And so on...
 *     }
 *     
 *     override public function onUpdate(event:UpdateScriptEvent):Void {
 *         if (!exists) {
 *             return;
 *         }
 *         
 *         menu.update(event.elapsed);
 *     }
 *     
 *     public function destroy():Void {
 *         if (!exists) {
 *             return;
 *         }
 *         
 *         parent = null;
 *         camera = null;
 *         
 *         menu.destroy();
 *         menu = null;
 *         
 *         menuItems.resize(0);
 *         
 *         menuItemGroup.destroy();
 *         menuItemGroup = null;
 *         
 *         exists = false;
 *     }
 *     
 *     override public function onDestroy(event:ScriptEvent):Void {
 *         destroy();
 *     }
 * }
 * ```
 */
class Menu extends ScriptedModule {
	public function new() {
		super("be.menu.Menu", -2147483647);
	}
	
	/**
	 * Creates a new `MenuObj` object.
	 * 
	 * Make sure the total number of items is equal to `sizeX * sizeY`!
	 * 
	 * @param data The `MenuData` to initialize the menu with.
	 * @return The new `MenuObj` object.
	 */
	public function new_Menu(?data:MenuData):MenuObj {
		if (data == null) {
			data = {};
		}
		
		var obj:Dynamic = {
			data: data.data == null ? {} : data.data,
			
			container: data.container,
			
			enabled: data.enabled == null ? false : data.enabled,
			frozen: false,
			
			selection: 0,
			prevSelection: 0,
			items: data.items == null ? new Array() : data.items,
			
			mouseSelection: -1,
			prevMouseSelection: -1,
			mouseItems: data.mouseItems == null ? new Array() : data.mouseItems,
			
			wrapX: data.wrapX == null ? true : data.wrapX,
			wrapY: data.wrapY == null ? true : data.wrapY,
			
			navigationHoldTick: [-1, -1, -1, -1],
			navigationHold: data.navigationHold == null ? false : data.navigationHold,
			navigationHoldStart: data.navigationHoldStart == null ? 0.5 : Math.max(data.navigationHoldStart, 0),
			navigationHoldInterval: data.navigationHoldInterval == null ? 0.1 : Math.max(data.navigationHoldInterval, 0.01),
			
			onEnter: data.onEnter == null ? function():Void {} : data.onEnter,
			onExit: data.onExit == null ? function():Void {} : data.onExit,
			onBack: data.onBack == null ? function():Void {} : data.onBack,
			
			onUpdate: data.onUpdate == null ? function(elapsed:Float):Void {} : data.onUpdate,
			
			exists: true
		};
		
		obj.setSelection = function(selection:Int):Void {
			if (selection < 0 || selection >= obj.items.length) {
				return;
			}
			
			var prevItem:Dynamic = obj.items[obj.selection];
			var curItem:Dynamic = obj.items[selection];
			
			obj.selection = selection;
			
			prevItem.focused = false;
			curItem.focused = true;
			
			prevItem.onUnfocus(curItem);
			curItem.onFocus(prevItem);
		};
		
		for (i in 0...obj.items.length) {
			var item:Dynamic = obj.items[i];
			
			item.menu = obj;
			if (data.overrideEnable != null) {
				item.enabled = data.overrideEnable;
			}
			
			if (i == 0) {
				item.focused = true;
			}
		}
		
		obj.sizeX = Std.int(Math.max(1, data.sizeX == null ? 1 : Math.min(obj.items.length, data.sizeX)));
		
		var maxRows:Int = Std.int(Math.floor(obj.items.length / obj.sizeX));
		obj.sizeY = Std.int(Math.max(1, data.sizeY == null ? maxRows : Math.min(maxRows, data.sizeY)));
		
		obj.pushItems = function(items:Array<Dynamic>, ?overrideEnable:Null<Bool>):Void {
			if (!obj.exists) {
				return;
			}
			
			for (i in 0...items.length) {
				var item:Dynamic = items[i];
				
				if (obj.items.length >= obj.sizeX * obj.sizeY) {
					return;
				}
				
				obj.items.push(item);
				
				item.menu = obj;
				if (overrideEnable != null) {
					item.enabled = overrideEnable;
				}
				
				if (obj.items.length == 1) {
					item.focused = true;
				}
			}
		};
		
		for (i in 0...obj.mouseItems.length) {
			var item:Dynamic = obj.mouseItems[i];
			
			item.menu = obj;
			if (data.overrideEnable != null) {
				item.enabled = data.overrideEnable;
			}
		}
		
		obj.pushMouseItems = function(items:Array<Dynamic>, ?overrideEnable:Null<Bool>):Void {
			if (!obj.exists) {
				return;
			}
			
			for (i in 0...items.length) {
				var item:Dynamic = items[i];
				
				obj.mouseItems.push(item);
				
				item.menu = obj;
				if (overrideEnable != null) {
					item.enabled = overrideEnable;
				}
			}
		};
		
		obj.debounce = function(duration:Float = 0.1):Void {
			if (duration < 0 || !obj.exists) {
				return;
			}
			
			obj.enabled = false;
			
			if (obj.debounceSequence != null) {
				obj.debounceSequence.curTime = 0;
				obj.debounceSequence.events[0].time = Math.max(obj.debounceSequence.events[0].time, duration);
			} else {
				obj.debounceSequence = ModuleHandler.getModule("be.sequence.Sequence").scriptCall("new_Sequence", [[
					{time: duration, callback: function():Void {
						obj.enabled = true;
						
						obj.debounceSequence = null;
					}}
				]]);
			}
		};
		
		obj.update = function(elapsed:Float):Void {
			if (obj.frozen || !obj.exists) {
				return;
			}
			
			if (obj.enabled) {
				var controls:Controls = PlayerSettings.player1.controls;
				if (controls != null) {
					if (controls.BACK) {
						obj.onBack();
					} else if (obj.items.length > 0) {
						var curItem:Dynamic = obj.items[obj.selection];
						if (controls.check("accept", 2) && curItem.enabled) { // JUST_PRESSED
							curItem.onPress();
							
							curItem.pressHoldTick = 0;
						} else if (controls.check("accept", -1) && curItem.enabled) { // JUST_RELEASED
							curItem.onRelease(curItem.pressHoldTick);
							
							curItem.pressHoldTick = -1;
						} else if (controls.check("accept", 1) && curItem.enabled) { // PRESSED
							if (curItem.pressHoldTick >= 0) {
								curItem.pressHoldTick += elapsed;
								if (curItem.pressHoldTick >= curItem.pressHoldStart + curItem.pressHoldInterval) {
									if (curItem.pressHold) {
										curItem.onHold(curItem.pressHoldTick);
									}
									
									curItem.pressHoldTick = curItem.pressHoldStart + (curItem.pressHoldTick - curItem.pressHoldStart) % curItem.pressHoldInterval;
								}
							}
						} else {
							obj.prevSelection = obj.selection;
							var prevItem:Dynamic = obj.items[obj.prevSelection];
							
							var directionPressTrigger:Bool = false;
							var directionPress:Array<Bool> = [
								controls.check("ui_left", 2), // JUST_PRESSED
								controls.check("ui_down", 2), // JUST_PRESSED
								controls.check("ui_up", 2),   // JUST_PRESSED
								controls.check("ui_right", 2) // JUST_PRESSED
							];
							
							for (i in 0...directionPress.length) {
								if (directionPress[i]) {
									directionPressTrigger = true;
									
									if (obj.navigationHold) {
										if (obj.navigationHoldTick[i] == -1) {
											obj.navigationHoldTick[i] = 0;
										}
									}
								}
							}
							
							if (directionPressTrigger) {
								prevItem.onDirectionPress(directionPress, obj.navigationHoldTick);
							}
							
							var directionHold:Array<Bool> = [false, false, false, false];
							if (obj.navigationHold) {
								var directionHoldTrigger:Bool = false;
								var directionPressed:Array<Bool> = [
									controls.check("ui_left", 1), // PRESSED
									controls.check("ui_down", 1), // PRESSED
									controls.check("ui_up", 1),   // PRESSED
									controls.check("ui_right", 1) // PRESSED
								];
									
								for (i in 0...directionPressed.length) {
									if (directionPressed[i] && obj.navigationHoldTick[i] >= 0) {
										obj.navigationHoldTick[i] += elapsed;
										if (obj.navigationHoldTick[i] >= obj.navigationHoldStart + obj.navigationHoldInterval) {
											directionHold[i] = true;
											directionHoldTrigger = true;
											
											obj.navigationHoldTick[i] = obj.navigationHoldStart + (obj.navigationHoldTick[i] - obj.navigationHoldStart) % obj.navigationHoldInterval;
										}
									}
								}
								
								if (directionHoldTrigger) {
									prevItem.onDirectionHold(directionHold, obj.navigationHoldTick);
								}
							}
							
							if (prevItem.autoNavigate) {
								var toMove:Array<Bool> = [
									directionPress[0] || directionHold[0],
									directionPress[1] || directionHold[1],
									directionPress[2] || directionHold[2],
									directionPress[3] || directionHold[3]
								];
								
								if (obj.sizeX > 1) {
									var curRow:Int = Std.int(Math.floor(obj.selection / obj.sizeX));
									
									if (toMove[0]) {
										obj.selection -= 1;
									}
									
									if (toMove[3]) {
										obj.selection += 1;
									}
									
									if (obj.wrapX) {
										obj.selection = curRow * obj.sizeX + (obj.selection + obj.sizeX) % obj.sizeX;
									} else {
										obj.selection = Std.int(FlxMath.bound(obj.selection, curRow * sizeX, (curRow + 1) * sizeX - 1));
									}
								}
								
								if (obj.sizeY > 1) {
									var curColumn:Int = obj.selection % obj.sizeX;
									
									if (toMove[2]) {
										obj.selection -= obj.sizeX;
									}
									
									if (toMove[1]) {
										obj.selection += obj.sizeX;
									}
									
									if (obj.wrapY) {
										obj.selection = (obj.selection + obj.sizeX * obj.sizeY) % (obj.sizeX * obj.sizeY);
									} else {
										obj.selection = Std.int(FlxMath.bound(obj.selection, curColumn, obj.sizeX * (obj.sizeY - 1) + curColumn));
									}
								}
							}
							
							if (obj.prevSelection != obj.selection) {
								curItem = obj.items[obj.selection];
								
								prevItem.focused = false;
								curItem.focused = true;
								
								prevItem.onUnfocus(curItem);
								curItem.onFocus(prevItem);
							}
							
							var directionReleaseTrigger:Bool = false;
							var directionRelease:Array<Bool> = [
								controls.check("ui_left", -1), // JUST_RELEASED
								controls.check("ui_down", -1), // JUST_RELEASED
								controls.check("ui_up", -1),   // JUST_RELEASED
								controls.check("ui_right", -1) // JUST_RELEASED
							];
							
							for (i in 0...directionRelease.length) {
								if (directionRelease[i]) {
									directionReleaseTrigger = true;
									
									if (obj.navigationHold) {
										obj.navigationHoldTick[i] = -1;
									}
								}
							}
							
							if (directionReleaseTrigger && curItem.enabled) {
								curItem.onDirectionRelease(directionRelease, obj.navigationHoldTick);
							}
						}
					}
				}
				
				if (FlxG.mouse.enabled) {
					var curMouseSelection:Null<Int> = -1;
					for (i in 0...obj.mouseItems.length) {
						var item:Dynamic = obj.mouseItems[i];
						if (item.hitbox == null) {
							item.hitbox = item.container;
							if (item.hitbox == null) {
								continue;
							}
						}
						
						if (FlxG.mouse.overlaps(item.hitbox)) {
							curMouseSelection = obj.mouseItems.indexOf(item);
							item.focused = true;
							break;
						}
					}
					
					var curMouseItem:Dynamic = curMouseSelection == -1 ? null : obj.mouseItems[curMouseSelection];
					if (curMouseSelection != obj.mouseSelection) {
						obj.prevMouseSelection = obj.mouseSelection;
						obj.mouseSelection = curMouseSelection;
						
						var prevMouseItem:Dynamic = obj.prevMouseSelection == -1 ? null : obj.mouseItems[obj.prevMouseSelection];
						if (prevMouseItem != null) {
							prevMouseItem.focused = false;
							prevMouseItem.onUnfocus(curMouseItem);
						}
						
						if (curMouseItem != null) {
							curMouseItem.onFocus(prevMouseItem);
						}
					}
					
					if (curMouseItem != null) {
						if (curMouseItem.enabled) {
							if (FlxG.mouse.justPressed) {
								curMouseItem.onPress();
								
								curMouseItem.pressHoldTick = 0;
							} else if (FlxG.mouse.justReleased) {
								curMouseItem.onRelease(curMouseItem.pressHoldTick);
								
								curMouseItem.pressHoldTick = -1;
							} else if (FlxG.mouse.pressed) {
								if (curMouseItem.pressHoldTick >= 0) {
									curMouseItem.pressHoldTick += elapsed;
									if (curMouseItem.pressHoldTick >= curMouseItem.pressHoldStart + curMouseItem.pressHoldInterval) {
										if (curMouseItem.pressHold) {
											curMouseItem.onHold(curMouseItem.pressHoldTick);
										}
										
										curMouseItem.pressHoldTick = curMouseItem.pressHoldStart + (curMouseItem.pressHoldTick - curMouseItem.pressHoldStart) % curMouseItem.pressHoldInterval;
									}
								}
							}
						} else if (curMouseItem.pressHoldTick >= 0) {
							curMouseItem.pressHoldTick = -1;
							
							curMouseItem.onRelease(curMouseItem.pressHoldTick);
						}
					}
				}
			}
			
			obj.onUpdate(elapsed);
			
			for (item in obj.items) {
				item.onUpdate(elapsed);
			}
			
			for (item in obj.mouseItems) {
				item.onUpdate(elapsed);
			}
		};
		
		obj.destroy = function():Void {
			if (!obj.exists) {
				return;
			}
			
			if (obj.debounceSequence != null) {
				obj.debounceSequence.destroy();
				obj.debounceSequence = null;
			}
			
			toDestroy.remove(obj.destroy);
			
			obj.exists = false;
		};
		
		toDestroy.push(obj.destroy);
		
		return obj;
	}
	
	private var toDestroy:Array<()->Void> = new Array();
	override public function onDestroy(event:ScriptEvent):Void {
		while (toDestroy.length > 0) {
			toDestroy.pop()();
		}
	}
}