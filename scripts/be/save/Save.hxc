// NOTE: autosave currently broken!! see `be.threads.Threads`

package be.save;

import String;
import StringTools;

import haxe.Timer;
import haxe.ds.StringMap;

import lime.app.Future;

import flixel.FlxG;

import funkin.modding.module.ModuleHandler;
import funkin.modding.module.ScriptedModule;
import funkin.play.PlayState;
import funkin.util.FileUtil;
import funkin.util.FileWriteMode;
import funkin.util.SerializerUtil;
import funkin.util.WindowUtil;

/**
 * Data for registering a save entry.
 */
typedef SaveEntryData = {
	/**
	 * Identifier string for your mod's save data. Make sure it's unique!
	 */
	id:String,
	
	/**
	 * The file path to read and write the data to, relative to "./save".
	 * This should be a JSON file; the extension will be added if not provided.
	 * 
	 * Defaults to `id`.
	 */
	filePath:String,
	
	/**
	 * The default save data structure to use if the file doesn't exist.
	 * Should only use JSON-compatible types.
	 * 
	 * Defaults to an empty object.
	 */
	template:Dynamic,
	
	/**
	 * Whether the save data should be saved to disk when the game reloads.
	 * 
	 * Defaults to `true`.
	 */
	saveOnReload:Bool,
	
	/**
	 * Whether the save data should be pretty-printed when saved, and minified otherwise.
	 * 
	 * Defaults to `false`.
	 */
	prettySave:Bool,
	
	/**
	 * Interval in minutes to auto-save the data.
	 * If `null` or less than 1, auto-saving is disabled.
	 * 
	 * Auto-saving will always be threaded.
	 * 
	 * Defaults to `null`.
	 */
	autoSaveInterval:Null<Int>
}

/**
 * Save entry object.
 */
typedef SaveEntry = {
	/**
	 * Identifier string for your mod's save data. Make sure it's unique!
	 */
	id:String,
	
	/**
	 * The file path to read and write the data to, relative to "./save".
	 * This should be a JSON file; the extension will be added if not provided.
	 * 
	 * Defaults to `id`.
	 */
	filePath:String,
	
	/**
	 * The default save data structure to use if the file doesn't exist.
	 * Should only use JSON-compatible types.
	 * 
	 * Defaults to an empty object.
	 */
	template:Dynamic,
	
	/**
	 * Your mod's save data structure.
	 * Returned by `getSaveData`.
	 * 
	 * Defaults to `template`, or the file contents if it exists.
	 */
	saveData:Dynamic,
	
	/**
	 * Whether the save data should be saved to disk when the game reloads.
	 * 
	 * Defaults to `true`.
	 */
	saveOnReload:Bool,
	
	/**
	 * Whether the save data should be pretty-printed when saved, and minified otherwise.
	 * 
	 * Defaults to `false`.
	 */	
	prettySave:Bool,
	
	/**
	 * Interval in minutes to auto-save the data.
	 * If `null` or less than 1, auto-saving is disabled.
	 * 
	 * Auto-saving will always be threaded.
	 * 
	 * Defaults to `null`.
	 */
	autoSaveInterval:Null<Int>
}

/**
 * A helper module for managing mod save data.
 * This will create a "save" folder in the game's working directory when a mod registers a save entry.
 * 
 * Example:
 * ```haxe
 * package exampleMod;
 * 
 * import funkin.modding.module.ModuleHandler;
 * import funkin.modding.module.ScriptedModule;
 * 
 * class SaveExample extends ScriptedModule {
 *     override public function new() {
 *         super("exampleMod.SaveExample", -2147483646);
 *     }
 *     
 *     private var saveTemplates:Dynamic = {
 *         exampleTemplate1: {
 *             exampleValue: 0
 *             exampleArray: new Array(),
 *             exampleObject: {
 *                 exampleString: "exampleValue"
 *             }
 *         },
 *         
 *         exampleTemplate2: {
 *             exampleBool: true
 *         }
 *     };
 *     
 *     override public function onCreate(event:ScriptEvent):Void {
 *         populateTemplates();
 *         tryRegister();
 *     }
 *     
 *     private var templatesPopulated:Bool = false;
 *     private function populateTemplates():Void {
 *         if (templatesPopulated) {
 *             return;
 *         }
 *         
 *         // Dynamically modify the template before registering if needed.
 *         for (i in 0...10) {
 *             saveTemplates.exampleTemplate1.exampleArray.push(i);
 *         }
 *         
 *         templatesPopulated = true;
 *     }
 *     
 *     private function tryRegister():Void {
 *         ModuleHandler.getModule("be.save.Save").scriptCall("register", [{
 *             id: "exampleMod1",
 *             filePath: "exampleModSave1", // Will save to "save/exampleModSave.json"
 *             
 *             template: saveTemplates.exampleTemplate1,
 *             
 *             saveOnReload: true,
 *             
 *             autoSaveInterval: 5 // Auto-save every 5 minutes
 *         }]);
 *         
 *         ModuleHandler.getModule("be.save.Save").scriptCall("register", [{
 *             id: "exampleMod2", // No `filePath`, will save to "save/exampleMod2.json"
 *             
 *             template: saveTemplates.exampleTemplate2,
 *             
 *             prettySave: true,
 *             
 *             autoSaveInterval: 1 // Auto-save every minute
 *         }]);
 *     }
 *     
 *     public function increment():Void {
 *         var saveData:Null<Dynamic> = ModuleHandler.getModule("be.save.Save").scriptCall("getSaveData", ["exampleMod1"]);
 *         if (saveData != null) {
 *             saveData.exampleValue++;
 *         }
 *     }
 * }
 * ```
 */
class Save extends ScriptedModule {
	override public function new() {
		super("be.save.Save", -2147483647);
	}
	
	/**
	 * Map of save entries.
	 */
	public var entries:StringMap<SaveEntry> = new StringMap();
	
	/**
	 * Internal list of save entry IDs that are currently undergoing file I/O.
	 * Attempting to save an entry that is already being saved will do nothing.
	 */
	private var saving:Array<String> = new Array();
	
	/**
	 * Registers a save entry and attempts to load the data.
	 * If the file doesn't exist, the template is used.
	 * 
	 * @param data The save entry data.
	 * @param cleanSave If `true`, keys in the loaded data that don't exist in the template will be removed.
	 * @param saveImmediately Optionally write the data to file immediately after registering.
	 * @return Your mod's save data structure, or `null` if the ID is invalid.
	 */
	public function register(data:SaveEntryData, cleanSave:Bool = false, saveImmediately:Bool = false):Dynamic {
		if (checkID(data) == null) {
			return;
		}
		
		if (entries.exists(data.id)) {
			return entries.get(data.id).data;
		}
		
		trace("beast-engine: Registering save entry \"" + data.id + "\"...");
		
		checkFilePath(data);
		
		checkSaveData(data);
		
		if (FileUtil.doesFileExist(data.filePath)) {
			var saveJSON:Dynamic = FileUtil.readJSONFromPath(data.filePath);
			if (saveJSON != null) {
				data.saveData = ModuleHandler.getModule("be.util.GenUtil").scriptCall("objectMerge", [data.saveData, saveJSON, cleanSave]);
				
				trace("beast-engine: Save data for entry \"" + data.id + "\" loaded.");
			} else {
				trace("beast-engine: Failed to read save data for entry \"" + data.id + "\". Using template.");
			}
		} else {
			trace("beast-engine: No exising save data found for entry \"" + data.id + "\". Initializing with template.");
		}
		
		if (data.saveOnReload == null) {
			data.saveOnReload = true;
		}
		
		if (data.prettySave == null) {
			data.prettySave = false;
		}
		
		if (data.autoSaveInterval == null) {
			data.autoSaveInterval = 0;
		}
		
		entries.set(data.id, data);
		
		if (saveImmediately) {
			save(data.id);
		}
		
		return data.saveData;
	}
	
	/**
	 * Gets the save data for a registered entry.
	 * 
	 * @param id The ID of the save entry.
	 * @return Your mod's save data structure, or `null` if none found.
	 */
	public function getSaveData(id:String):Null<Dynamic> {
		if (!entries.exists(id)) {
			return;
		}
		
		return checkSaveData(entries.get(id));
	}
	
	/**
	 * Attempt to save the data for a registered entry to disk.
	 * 
	 * @param id The ID of the save entry.
	 * @param pretty If `true`, the JSON will be pretty-printed, and minified otherwise. Defaults to the entry's `prettySave`.
	 * @param threaded If `true`, the save will be done in a separate thread to avoid freezing the game.
	 * @return Whether the save was successful or not. Will always be `true` if `threaded` is `true` unless initialization failed.
	 */
	public function save(id:String, ?pretty:Bool, threaded:Bool = false):Bool {
		if (!entries.exists(id)) {
			return false;
		}
		
		var entry:SaveEntry = entries.get(id);
		if (checkID(entry) == null) {
			return false;
		}
		
		if (saving.contains(entry.id)) {
			return false;
		}
		
		var path:String = checkFilePath(entry);
		var json:String = SerializerUtil.toJSON(checkSaveData(entry), null, pretty == null ? entry.prettySave : pretty);
		
		if (threaded) {
			ModuleHandler.getModule("be.threads.Threads").scriptCall("queueAsync", [
				function(data:Dynamic):Void {
					var data_persist:Dynamic = data.data;
					ModuleHandler.getModule("be.util.GenUtil").scriptCall("tryBlock", [
						function():Void {
							saving.push(data_persist.id);
							FileUtil.writeStringToPath(data_persist.path, data_persist.json, FileWriteMode.Force);
						}
					]);
				},
				
				{
					data: {
						id: entry.id,
						path: path,
						json: json
					},
					
					onError: function(data:Dynamic, result:Dynamic):Void {
						saving.remove(data.data.id);
					},
					
					onComplete: function(data:Dynamic, result:Dynamic):Void {
						saving.remove(data.data.id);
					}
				}
			]);
			
			return true;
		}
		
		var saveSuccess:Bool = false;
		ModuleHandler.getModule("be.util.GenUtil").scriptCall("tryBlock", [
			function():Void {
				saving.push(entry.id);
				FileUtil.writeStringToPath(path, json, FileWriteMode.Force);
				
				saving.remove(entry.id);
				saveSuccess = true;
			}
		]);
		
		return saveSuccess;
	}
	
	/**
	 * Attempts to save all registered entries to disk.
	 * 
	 * @param pretty If `true`, the JSONs will be pretty-printed, and minified otherwise.
	 * @param threaded If `true`, the saves will be done in a separate thread to avoid freezing the game.
	 * @return Whether all saves were successful or not. Will always be `true` if `threaded` is `true` unless an initialization failed.
	 */
	public function saveAll(?pretty:Bool, threaded:Bool = false):Bool {
		var allSaveSuccess:Bool = true;
		for (entry in entries.keys()) {
			allSaveSuccess = allSaveSuccess && save(entry, pretty, threaded);
		}
		
		return allSaveSuccess;
	}
	
	override public function onCreate(event:ScriptEvent):Void {
		hook();
		
		initAutoSave();
		
		WindowUtil.windowExit.add(exit);
	}
	
	private function hook():Void {
		ModuleHandler.getModule("be.reloader.Reloader").scriptGet("reloadPre").set("be.save.Save", {
			priority: -2147483648,
			callback: "onReload",
			variables: function():StringMap<Dynamic> {
				return [
					"entries" => entries,
					
					"autoSaveTick" => autoSaveTick
				];
			}
		});
	}
	
	public function onReload():Void {
		hook();
		
		initAutoSave();
		
		WindowUtil.windowExit.add(exit);
	}
	
	public var exit:(Null<Dynamic>)->Void = function(?_):Void {
		trace("beast-engine: Game closing! Attempting to write all save data...");
		
		if (autoSaveTimer != null) {
			autoSaveTimer.stop();
			autoSaveTimer = null;
		}
		
		saveAll();
		
		if (WindowUtil.windowExit.has(exit)) {
			WindowUtil.windowExit.remove(exit);
		}
	};
	
	private var pressedReload:Bool = false;
	override public function onUpdate(event:UpdateScriptEvent):Void {
		pressedReload = FlxG.keys.justPressed.F5;
	}
	
	override public function onDestroy(event:ScriptEvent):Void {
		if (
			(PlayState.instance != null && PlayState.instance.criticalFailure) ||
			(!FlxG.keys.justPressed.F5 && !pressedReload)
		) {
			return;
		}
		
		if (autoSaveTimer != null) {
			autoSaveTimer.stop();
			autoSaveTimer = null;
		}
		
		for (entry in entries.keys()) {
			if (entries.get(entry).saveOnReload == true) {
				save(entry);
			}
		}
		
		if (WindowUtil.windowExit.has(exit)) {
			WindowUtil.windowExit.remove(exit);
		}
	}
	
	private function checkID(entry:SaveEntry):Null<String> {
		if (entry == null || entry.id == null || !Std.isOfType(entry.id, String)) {
			return;
		}
		
		entry.id = StringTools.trim(entry.id);
		if (entry.id == "") {
			return;
		}
		
		return entry.id;
	}
	
	private function checkFilePath(entry:SaveEntry):Null<String> {
		if (checkID(entry) == null) {
			return;
		}
		
		if (entry.filePath == null || !Std.isOfType(entry.filePath, String)) {
			entry.filePath = entry.id;
		}
		
		entry.filePath = StringTools.trim(entry.filePath);
		if (entry.filePath == "") {
			entry.filePath = entry.id;
		}
		
		entry.filePath = ModuleHandler.getModule("be.util.GenUtil").scriptCall("sanitizePath", [entry.filePath]);
		
		if (!StringTools.startsWith(entry.filePath, "save/")) {
			entry.filePath = "save/" + entry.filePath;
		}
		
		if (!StringTools.endsWith(entry.filePath, ".json")) {
			entry.filePath += ".json";
		}
		
		return entry.filePath;
	}
	
	private function checkSaveData(entry:SaveEntry):Dynamic {
		if (entry.template == null) {
			entry.template = {};
		}
		
		if (entry.saveData == null) {
			entry.saveData = entry.template;
		}
		
		return entry.saveData;
	}
	
	private var autoSaveTimer:Null<Timer> = null;
	private var autoSaveTick:Int = -1;
	private function initAutoSave():Void {
		if (autoSaveTimer != null) {
			return;
		}
		
		autoSaveTimer = Timer.delay(function():Void {
			doAutoSave();
		}, 60000);
	}
	
	private function doAutoSave():Void {
		autoSaveTick++;
		
		var toSave:Array<SaveEntry> = new Array();
		for (id in entries.keys()) {
			var entry:SaveEntry = entries.get(id);
			var autoSaveInterval:Int = entry.autoSaveInterval == null ? 0 : Std.int(Math.max(entry.autoSaveInterval, 0));
			if (autoSaveInterval > 0 && autoSaveTick % autoSaveInterval == 0) {
				toSave.push(entry);
			}
		}
		
		for (entry in toSave) {
			trace("beast-engine: Auto-saving entry \"" + entry.id + "\".");
			save(entry.id, entry.prettySave, true);
		}
		
		autoSaveTimer = Timer.delay(function():Void {
			doAutoSave();
		}, 60000);
	}
}